{
    "title": "Shift - VFS Final Project",
	"art": {
		"background": "/assets/images/headers/ShiftHeader.jpg",
		"background_position": "bottom",
		"logo": ""
	},
	"page_data": {
		"projectBlocks": [
			{
				"projectVideo": "https://www.youtube.com/embed/CEN9Z9yFBho?si=1kJXzfp-hn3mzX41"
			},
			{
				"blockTitle": "Summary",
				"description": [
					{
						"type": "text",
						"text": "For this project I was blessed with working with amazing teammates who made the entire experience a joy. In the project I ended up wearing many hats but nevertheless learned a lot of lessons from my mistakes."
					}
				]
			},        
			{
				"blockTitle": "Accomplishments",
				"list": [
					{
						"nav": "gameplay-prototyping",
						"text": "Gameplay Prototyping"
					},
					{
						"nav": "level-editor",
						"text": "Custom In-Engine Level Editor"
					},
					{
						"nav": "proc-map-gen",
						"text": "Procedural Map Generation / Creation"
					},
					{
						"nav": "optimization",
						"text": "Optimization of Over 25,000 Components at Runtime"
					},
					{
						"nav": "in-engine-audio-tools",
						"text": "Created In-Engine Audio Tools for Sound Designers"
					},
					{
						"nav": "networking",
						"text": "Steam Networking & Custom Replication"
					},
					{
						"nav": "wwise",
						"text": "Point of Contact for Sound Designers & Wwise Integrator"
					},
					{
						"nav": "build-automation",
						"text": "Unreal & Wwise Build Automation"
					}
				]
			},        
			{
				"nav": "gameplay-prototyping",
				"blockTitle": "Gameplay Programming & Prototyping (Character, Camera, & Gameflow)",
				"description": [
					{
						"type": "text",
						"text": "Early on in the project we had to decide on which engine we were going to use. As we had two programmers we both set off to prototype in our respective preferred engines. I began in Unreal 4 and rapidly prototyped a series of features for our puzzle game."
					},
					{
						"type": "text",
						"text": "Since the game began as a 2.5D isometric game, I had to develop a few camera systems to accomodate for the player's movement and visibiliy of our puzzle mechanics."
					},
					{
						"type": "img",
						"link": "/assets/images/project-images/shift/original-concept-shift.jpg",
						"text": "Original Isometric Concept Art"
					},
					{
						"type": "text",
						"text": "After some deliberation, as a team we decided to change directions and turn the game into a third-person co-op puzzle game and in turn made the choice of using Unreal. That which led to further joint prototyping."
					}
				]
			},        
			{
				"nav": "level-editor",
				"blockTitle": "Custom In-Engine Level Editor",
				"description": [
					{
						"type": "text",
						"text": "In order to expedite the level design and prototyping, I created a Level Editor which would allow us to create levels at a much faster rate and increase performance by making use of Unreal's hierarchical instanced static mesh system. Effectively hi-jacking the system Unreal created for foliage to allow as much grandeur as we desired in our level."
					},
					{
						"type": "text",
						"text": "As the game continued to progress, so did the Level Editor. It began as a very simple concept with basic shapes and a basic U.I but soon progress to proper rooms with a series of rulesets for placing of walls and pillars."
					},
					{
						"type": "img",
						"link": "/assets/images/project-images/shift/level-editor-3.jpg",
						"text": "Level Editor After Adding Placement Ruleset"
					},
					{
						"type": "text",
						"text": "As tools tend to do, the Level Editor had to expand further and further to keep up with the game and the Level Design needs. Soon afterwards, the system was expanded to include the game interactables and other design features like elevation and room connections."
					},
					{
						"type": "img",
						"link": "/assets/images/project-images/shift/level-editor-4.jpg",
						"text": "Level Editor with Interactable Integration"
					}
				]
			},        
			{
				"nav": "proc-map-gen",
				"blockTitle": "Procedural Map Generation / Creation",
				"description": [
					{
						"type": "text",
						"text": ""
					},
					{
						"type": "text",
						"text": ""
					},
					{
						"type": "img",
						"link": "",
						"text": "Original Isometric Concept Art"
					},
					{
						"type": "text",
						"text": ""
					}
				]			
			},        
			{
				"nav": "optimization",
				"blockTitle": "Optimization of Over 25,000 Components at Runtime",
				"description": [
					{
						"type": "text",
						"text": ""
					},
					{
						"type": "text",
						"text": ""
					},
					{
						"type": "img",
						"link": "",
						"text": "Original Isometric Concept Art"
					},
					{
						"type": "text",
						"text": ""
					}
				]			
			},        
			{
				"nav": "in-engine-audio-tools",
				"blockTitle": "Created In-Engine Audio Tools for Sound Designers",
				"description": [
					{
						"type": "text",
						"text": "Early in the project I was advised by a few Mentors that the collaboration with the Sound Design collaborators could prove jarring as it would be our first time working with a completely external team which wasn't comprised of game design students. Therefore I set out to make the collaboration as seemless as possible. After checking out the Sound Designer's pipeline and the integration of Wwise I created an audio tool that allowed the Sound Designers to post the wwise events from within Unreal to test whether their Wwise implementation was correctly working."
					},
					{
						"type": "img",
						"link": "/assets/images/project-images/shift/audio-tool.jpg",
						"text": "In-Engine Audio Tool"
					},
					{
						"type": "text",
						"text": "The tool functions off of a google sheet which live updates from the Sound Designer's asset list. Therefore as the Sound Designers outlined the sounds and added them to Wwise they'd be able to instantly try them in the engine with as little hassle as possible."
					}
				]			
			},        
			{
				"nav": "networking",
				"blockTitle": "Steam Networking & Custom Replication",
				"description": [
					{
						"type": "text",
						"text": "When we decided to make our game a co-op game we had to both learn how to do networking and which way we would be able to maximize our efforts for the desired outcome. Little did we know that Unreal already had a rather robust Steam tie-in that made the process far less painful."
					},
					{
						"type": "img",
						"link": "/assets/images/project-images/shift/lobby.PNG",
						"text": "In-Game Lobby"
					},
					{
						"type": "text",
						"text": ""
					}
				]			
			},      
			{
				"nav": "wwise",
				"blockTitle": "Point of Contact for Sound Designers & Wwise Integrator",
				"description": [
					{
						"type": "text",
						"text": "As Shift was a VFS Final Project we were required to use Wwise, which we hadn't touched at all upto the point when we started working with the Sound Design collaborators. At the start it was a whirlwind of new information and knowledge but it soon fell into order. It taught me the invaluability of communication as we all at first stumbled until we found our stride."
					},
					{
						"type": "img",
						"link": "/assets/images/project-images/shift/wwise.jpg",
						"text": "Wwise Profiler"
					}
				]			
			},        
			{
				"nav": "build-automation",
				"blockTitle": "Unreal & Wwise Build Automation",
				"description": [
					{
						"type": "text",
						"text": "When it came to Shift, as we had many hands on the project we had to sort out some manner of testing things at a rapid pace and being able to ensure that our builds would be readily avaliable and accessable for our own team and even Mentors and Instructors. In order to facilitate this we were provided with a base script for automating the building procedure in Unreal. Past the base script I further expanded it in and tied it into our version control, backup management. Through which I had to re-write the script from scratch several times."
					}
				]			
			}
		]
	},
	"links": {
		"platforms": []
	}
}